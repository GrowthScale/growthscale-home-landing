name: 🔐 Security Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Executar diariamente às 2h da manhã
    - cron: '0 2 * * *'

jobs:
  security-audit:
    name: 🔍 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Para gitleaks

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: 🚨 Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --verbose --redact

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🧪 Run TypeScript strict check
        run: npx tsc --noEmit --strict

      - name: 🔍 Run ESLint security rules
        run: npx eslint . --ext .ts,.tsx --config eslint.config.js

  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Check for outdated dependencies
        run: npx npm-check-updates --target minor

      - name: 🔒 Check for known vulnerabilities
        run: npx audit-ci --moderate

  csp-check:
    name: 🛡️ CSP Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Validate CSP headers
        run: |
          # Verificar se CSP está configurado no vercel.json
          if grep -q "Content-Security-Policy" vercel.json; then
            echo "✅ CSP headers found in vercel.json"
          else
            echo "❌ CSP headers not found in vercel.json"
            exit 1
          fi
          
          # Verificar se CSP não tem 'unsafe-inline' ou 'unsafe-eval'
          if grep -q "unsafe-inline\|unsafe-eval" vercel.json; then
            echo "⚠️  CSP contains unsafe directives"
          else
            echo "✅ CSP is secure (no unsafe directives)"
          fi

  env-check:
    name: 🔐 Environment Variables Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for hardcoded secrets
        run: |
          # Verificar se há chaves hardcoded
          if grep -r "sk_live\|pk_live\|AKIA\|AIza\|ghp_" src/ --exclude-dir=node_modules; then
            echo "❌ Potential secrets found in source code"
            exit 1
          else
            echo "✅ No hardcoded secrets found"
          fi
          
          # Verificar se .env.example existe e está completo
          if [ -f "env.example" ]; then
            echo "✅ env.example file exists"
          else
            echo "❌ env.example file missing"
            exit 1
          fi

  report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-check, csp-check, env-check]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Generate security report
        run: |
          echo "🔐 Security Audit Report" > security-report.md
          echo "=========================" >> security-report.md
          echo "" >> security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Branch: ${{ github.ref }}" >> security-report.md
          echo "" >> security-report.md
          
          # Adicionar resultados dos jobs
          echo "## Job Results" >> security-report.md
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> security-report.md
          echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
          echo "- CSP Check: ${{ needs.csp-check.result }}" >> security-report.md
          echo "- Environment Check: ${{ needs.env-check.result }}" >> security-report.md
          
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "1. Review any failed checks above" >> security-report.md
          echo "2. Update dependencies if vulnerabilities found" >> security-report.md
          echo "3. Review CSP configuration" >> security-report.md
          echo "4. Check for any exposed secrets" >> security-report.md

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
