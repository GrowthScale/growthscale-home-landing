name: 🧪 Testes & CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * *' # Diariamente às 3h

jobs:
  # =====================================================
  # TESTES UNITÁRIOS
  # =====================================================
  unit-tests:
    name: 🧪 Testes Unitários
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔍 Run TypeScript check
        run: npm run type-check
        
      - name: 🧪 Run unit tests
        run: npm run test
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # =====================================================
  # TESTES E2E
  # =====================================================
  e2e-tests:
    name: 🌐 Testes E2E
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: 🧪 Run E2E tests
        run: npm run e2e
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: 📸 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  # =====================================================
  # TESTES DE PERFORMANCE
  # =====================================================
  performance-tests:
    name: ⚡ Testes de Performance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: ⚡ Run Lighthouse tests
        run: |
          npx playwright test --project=chromium --grep="Performance"
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

  # =====================================================
  # TESTES DE ACESSIBILIDADE
  # =====================================================
  accessibility-tests:
    name: ♿ Testes de Acessibilidade
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: ♿ Run accessibility tests
        run: |
          npx playwright test --project=chromium --grep="Acessibilidade"
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

  # =====================================================
  # RELATÓRIO FINAL
  # =====================================================
  test-report:
    name: 📊 Relatório de Testes
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, performance-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📊 Generate test report
        run: |
          echo "# 🧪 Relatório de Testes - GrowthScale" > test-report.md
          echo "" >> test-report.md
          echo "## 📅 Data: $(date)" >> test-report.md
          echo "" >> test-report.md
          echo "### ✅ Testes Unitários" >> test-report.md
          echo "- Status: ${{ needs.unit-tests.result }}" >> test-report.md
          echo "- Cobertura: Disponível no Codecov" >> test-report.md
          echo "" >> test-report.md
          echo "### 🌐 Testes E2E" >> test-report.md
          echo "- Status: ${{ needs.e2e-tests.result }}" >> test-report.md
          echo "- Navegadores: Chrome, Firefox, Safari, Mobile" >> test-report.md
          echo "" >> test-report.md
          echo "### ⚡ Testes de Performance" >> test-report.md
          echo "- Status: ${{ needs.performance-tests.result }}" >> test-report.md
          echo "- Métricas: LCP, FID, CLS" >> test-report.md
          echo "" >> test-report.md
          echo "### ♿ Testes de Acessibilidade" >> test-report.md
          echo "- Status: ${{ needs.accessibility-tests.result }}" >> test-report.md
          echo "- Padrões: WCAG 2.1 AA" >> test-report.md
          echo "" >> test-report.md
          echo "## 📈 Resumo" >> test-report.md
          echo "- Total de Jobs: 4" >> test-report.md
          echo "- Jobs com Sucesso: ${{ (needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.performance-tests.result == 'success' && needs.accessibility-tests.result == 'success') && '4' || '0' }}" >> test-report.md
          echo "- Jobs com Falha: ${{ (needs.unit-tests.result != 'success' || needs.e2e-tests.result != 'success' || needs.performance-tests.result != 'success' || needs.accessibility-tests.result != 'success') && '1' || '0' }}" >> test-report.md
          
      - name: 📤 Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md
          retention-days: 30
          
      - name: 📧 Notify on failure
        if: failure()
        run: |
          echo "❌ Alguns testes falharam!"
          echo "Verifique os logs para mais detalhes."
