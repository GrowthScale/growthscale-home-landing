// ESLint Configuration for GrowthScale
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "@typescript-eslint/eslint-plugin";
import tsparser from "@typescript-eslint/parser";

export default [
  { ignores: ["dist", "node_modules", "*.config.js", "*.config.ts"] },
  
  // Base JavaScript configuration
  js.configs.recommended,
  
  // TypeScript files configuration
  {
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      sourceType: "module",
      parser: tsparser,
      parserOptions: {
        ecmaVersion: 2020,
        sourceType: "module",
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        ...globals.browser,
        ...globals.node,
        ...globals.serviceworker,
        ...globals.deno,
        process: "readonly",
        console: "readonly",
        fetch: "readonly",
        Response: "readonly",
        Request: "readonly",
        URL: "readonly",
        caches: "readonly",
        clients: "readonly",
        self: "readonly",
        Deno: "readonly",
        __dirname: "readonly",
        boolean: "readonly",
        interface: "readonly",
        type: "readonly",
        as: "readonly",
        import: "readonly",
        export: "readonly",
        default: "readonly",
        namespace: "readonly",
        module: "readonly",
        declare: "readonly",
        enum: "readonly",
        implements: "readonly",
        extends: "readonly",
        abstract: "readonly",
        readonly: "readonly",
        public: "readonly",
        private: "readonly",
        protected: "readonly",
        static: "readonly",
        async: "readonly",
        await: "readonly",
        yield: "readonly",
        function: "readonly",
        class: "readonly",
        const: "readonly",
        let: "readonly",
        var: "readonly",
        if: "readonly",
        else: "readonly",
        for: "readonly",
        while: "readonly",
        do: "readonly",
        switch: "readonly",
        case: "readonly",
        break: "readonly",
        continue: "readonly",
        return: "readonly",
        throw: "readonly",
        try: "readonly",
        catch: "readonly",
        finally: "readonly",
        new: "readonly",
        delete: "readonly",
        typeof: "readonly",
        instanceof: "readonly",
        in: "readonly",
        of: "readonly",
        with: "readonly",
        void: "readonly",
        null: "readonly",
        undefined: "readonly",
        true: "readonly",
        false: "readonly",
        NaN: "readonly",
        Infinity: "readonly",
        this: "readonly",
        super: "readonly",
        arguments: "readonly",
        eval: "readonly",
        parseInt: "readonly",
        parseFloat: "readonly",
        isNaN: "readonly",
        isFinite: "readonly",
        decodeURI: "readonly",
        decodeURIComponent: "readonly",
        encodeURI: "readonly",
        encodeURIComponent: "readonly",
        escape: "readonly",
        unescape: "readonly",
        Object: "readonly",
        Function: "readonly",
        Array: "readonly",
        String: "readonly",
        Boolean: "readonly",
        Number: "readonly",
        Math: "readonly",
        Date: "readonly",
        RegExp: "readonly",
        Error: "readonly",
        EvalError: "readonly",
        RangeError: "readonly",
        ReferenceError: "readonly",
        SyntaxError: "readonly",
        TypeError: "readonly",
        URIError: "readonly",
        JSON: "readonly",
        Promise: "readonly",
        Symbol: "readonly",
        Map: "readonly",
        Set: "readonly",
        WeakMap: "readonly",
        WeakSet: "readonly",
        Proxy: "readonly",
        Reflect: "readonly",
        Int8Array: "readonly",
        Uint8Array: "readonly",
        Uint8ClampedArray: "readonly",
        Int16Array: "readonly",
        Uint16Array: "readonly",
        Int32Array: "readonly",
        Uint32Array: "readonly",
        Float32Array: "readonly",
        Float64Array: "readonly",
        DataView: "readonly",
        ArrayBuffer: "readonly",
        SharedArrayBuffer: "readonly",
        Atomics: "readonly",
        Generator: "readonly",
        GeneratorFunction: "readonly",
        AsyncFunction: "readonly",
        AsyncGenerator: "readonly",
        AsyncGeneratorFunction: "readonly",
        Intl: "readonly",
        WebAssembly: "readonly",
        BigInt: "readonly",
        BigInt64Array: "readonly",
        BigUint64Array: "readonly",
        globalThis: "readonly",
        React: "readonly",
        JSX: "readonly",
      },
    },
    plugins: {
      "@typescript-eslint": tseslint,
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...tseslint.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
      "@typescript-eslint/no-explicit-any": "warn",
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/explicit-module-boundary-types": "off",
      "@typescript-eslint/no-non-null-assertion": "warn",
      "prefer-const": "error",
      "no-var": "error",
      "no-console": "warn",
      "eqeqeq": ["error", "always"],
      "curly": ["error", "all"],
      "no-eval": "error",
      "no-implied-eval": "error",
      "no-new-func": "error",
      "no-script-url": "error",
      "no-undef": "error",
      "react-hooks/exhaustive-deps": "warn",
    },
  },
  
  // JavaScript files configuration
  {
    files: ["**/*.js"],
    languageOptions: {
      ecmaVersion: 2020,
      sourceType: "module",
      globals: {
        ...globals.browser,
        ...globals.node,
        ...globals.serviceworker,
        process: "readonly",
        console: "readonly",
        fetch: "readonly",
        Response: "readonly",
        Request: "readonly",
        URL: "readonly",
        caches: "readonly",
        clients: "readonly",
        self: "readonly",
        Deno: "readonly",
      },
    },
    rules: {
      "no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
      "prefer-const": "error",
      "no-var": "error",
      "no-console": "warn",
      "eqeqeq": ["error", "always"],
      "curly": ["error", "all"],
      "no-eval": "error",
      "no-implied-eval": "error",
      "no-new-func": "error",
      "no-script-url": "error",
      "no-undef": "error",
    },
  },
];
