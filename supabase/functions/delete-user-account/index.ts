// supabase/functions/delete-user-account/index.ts
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";

interface DeleteUserRequest {
  user: {
    id: string;
    email: string;
  };
  reason?: string;
  permanent?: boolean;
}

serve(async (req) => {
  try {
    // Configurar CORS
    if (req.method === 'OPTIONS') {
      return new Response(null, {
        status: 200,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        },
      });
    }

    // Verificar m√©todo HTTP
    if (req.method !== 'POST') {
      return new Response(JSON.stringify({ error: 'M√©todo n√£o permitido' }), { 
        status: 405,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // √â crucial usar a chave de Service Role para ter permiss√µes de administrador
    const serviceRoleKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
    if (!serviceRoleKey) {
      throw new Error("Chave de servi√ßo do Supabase n√£o configurada.");
    }

    const supabaseUrl = Deno.env.get("SUPABASE_URL");
    if (!supabaseUrl) {
      throw new Error("URL do Supabase n√£o configurada.");
    }

    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

    // Obt√©m os dados da requisi√ß√£o
    const { user, reason, permanent = false }: DeleteUserRequest = await req.json();
    
    if (!user || !user.id) {
      throw new Error("Utilizador n√£o autenticado ou dados inv√°lidos.");
    }

    if (process.env.NODE_ENV === 'development') { console.log(`üîí Iniciando exclus√£o de conta para usu√°rio: ${user.email} (${user.id}) }`);
    if (process.env.NODE_ENV === 'development') { console.log(`üìù Motivo: ${reason || 'N√£o informado'}`); }
    if (process.env.NODE_ENV === 'development') { console.log(`üóëÔ∏è Exclus√£o permanente: ${permanent}`); }

    // A ORDEM √â IMPORTANTE: Primeiro elimina os dados relacionados, depois o utilizador.
    
    // 1. Eliminar logs de comunica√ß√£o
    if (process.env.NODE_ENV === 'development') { console.log("üóëÔ∏è Eliminando logs de comunica√ß√£o..."); }
    const { error: commLogsError } = await supabaseAdmin
      .from('communication_logs')
      .delete()
      .eq('user_id', user.id);
    
    if (commLogsError) {
      console.error("Erro ao eliminar logs de comunica√ß√£o:", commLogsError);
    }

    // 2. Eliminar rascunhos de escalas
    if (process.env.NODE_ENV === 'development') { console.log("üóëÔ∏è Eliminando rascunhos de escalas..."); }
    const { error: draftsError } = await supabaseAdmin
      .from('schedule_drafts')
      .delete()
      .eq('created_by', user.id);
    
    if (draftsError) {
      console.error("Erro ao eliminar rascunhos:", draftsError);
    }

    // 3. Eliminar escalas
    if (process.env.NODE_ENV === 'development') { console.log("üóëÔ∏è Eliminando escalas..."); }
    const { error: schedulesError } = await supabaseAdmin
      .from('schedules')
      .delete()
      .eq('created_by', user.id);
    
    if (schedulesError) {
      console.error("Erro ao eliminar escalas:", schedulesError);
    }

    // 4. Eliminar turnos
    if (process.env.NODE_ENV === 'development') { console.log("üóëÔ∏è Eliminando turnos..."); }
    const { error: shiftsError } = await supabaseAdmin
      .from('shifts')
      .delete()
      .eq('created_by', user.id);
    
    if (shiftsError) {
      console.error("Erro ao eliminar turnos:", shiftsError);
    }

    // 5. Eliminar funcion√°rios
    if (process.env.NODE_ENV === 'development') { console.log("üóëÔ∏è Eliminando funcion√°rios..."); }
    const { error: employeesError } = await supabaseAdmin
      .from('employees')
      .delete()
      .eq('created_by', user.id);
    
    if (employeesError) {
      console.error("Erro ao eliminar funcion√°rios:", employeesError);
    }

    // 6. Eliminar associa√ß√µes de usu√°rio com empresas
    if (process.env.NODE_ENV === 'development') { console.log("üóëÔ∏è Eliminando associa√ß√µes com empresas..."); }
    const { error: companyUsersError } = await supabaseAdmin
      .from('company_users')
      .delete()
      .eq('user_id', user.id);
    
    if (companyUsersError) {
      console.error("Erro ao eliminar associa√ß√µes:", companyUsersError);
    }

    // 7. Eliminar empresas (se o usu√°rio for o propriet√°rio)
    if (process.env.NODE_ENV === 'development') { console.log("üóëÔ∏è Verificando e eliminando empresas..."); }
    const { data: userCompanies, error: companiesQueryError } = await supabaseAdmin
      .from('companies')
      .select('id, name')
      .eq('owner_id', user.id);
    
    if (companiesQueryError) {
      console.error("Erro ao consultar empresas:", companiesQueryError);
    } else if (userCompanies && userCompanies.length > 0) {
      if (process.env.NODE_ENV === 'development') { console.log(`üè¢ Eliminando ${userCompanies.length} empresa(s) do usu√°rio...`); }
      
      for (const company of userCompanies) {
        if (process.env.NODE_ENV === 'development') { console.log(`üóëÔ∏è Eliminando empresa: ${company.name} (${company.id})`); }
        
        // Eliminar funcion√°rios da empresa
        await supabaseAdmin
          .from('employees')
          .delete()
          .eq('company_id', company.id);
        
        // Eliminar escalas da empresa
        await supabaseAdmin
          .from('schedules')
          .delete()
          .eq('company_id', company.id);
        
        // Eliminar a empresa
        await supabaseAdmin
          .from('companies')
          .delete()
          .eq('id', company.id);
      }
    }

    // 8. Log da exclus√£o para auditoria
    if (process.env.NODE_ENV === 'development') { console.log("üìù Registrando log de auditoria..."); }
    const { error: auditError } = await supabaseAdmin
      .from('audit_logs')
      .insert({
        action: 'USER_ACCOUNT_DELETION',
        user_id: user.id,
        user_email: user.email,
        details: {
          reason: reason || 'Solicita√ß√£o do usu√°rio',
          permanent: permanent,
          timestamp: new Date().toISOString(),
          data_deleted: [
            'communication_logs',
            'schedule_drafts', 
            'schedules',
            'shifts',
            'employees',
            'company_users',
            'companies'
          ]
        }
      });
    
    if (auditError) {
      console.error("Erro ao registrar log de auditoria:", auditError);
    }

    // 9. Finalmente, elimina o utilizador do sistema de autentica√ß√£o do Supabase
    if (process.env.NODE_ENV === 'development') { console.log("üë§ Eliminando usu√°rio do sistema de autentica√ß√£o..."); }
    const { error: deleteError } = await supabaseAdmin.auth.admin.deleteUser(user.id);
    
    if (deleteError) {
      console.error("Erro ao eliminar usu√°rio:", deleteError);
      throw deleteError;
    }

    if (process.env.NODE_ENV === 'development') { console.log("‚úÖ Conta eliminada com sucesso!"); }

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: "Conta eliminada com sucesso.",
        timestamp: new Date().toISOString()
      }), 
      { 
        status: 200,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        }
      }
    );

  } catch (error) {
    console.error("‚ùå Erro ao eliminar a conta do utilizador:", error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        timestamp: new Date().toISOString()
      }), 
      { 
        status: 500,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        }
      }
    );
  }
});
