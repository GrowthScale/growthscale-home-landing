// src/pages/AuthCallback.tsx
import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { createCompanyForUser } from '@/services/api';

export default function AuthCallback() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [status, setStatus] = useState<string>('Verificando sua conta...');

  useEffect(() => {
    const processAuthCallback = async () => {
      try {
        const code = searchParams.get('code');
        const error = searchParams.get('error');
        const errorDescription = searchParams.get('error_description');

        console.log('üîÑ Iniciando processamento do AuthCallback...');
        console.log('üìç URL atual:', window.location.href);
        console.log('üîë C√≥digo:', code);
        console.log('‚ùå Erro:', error);
        console.log('üìù Descri√ß√£o do erro:', errorDescription);

        if (error) {
          console.error('‚ùå Erro de autentica√ß√£o detectado:', error, errorDescription);
          setStatus('Erro na autentica√ß√£o. Redirecionando...');
          navigate('/auth?error=' + encodeURIComponent(error), { replace: true });
          return;
        }

        if (!code) {
          console.error('‚ùå Nenhum c√≥digo de autentica√ß√£o encontrado');
          setStatus('Nenhum c√≥digo encontrado. Redirecionando...');
          navigate('/auth?error=no_code', { replace: true });
          return;
        }

        setStatus('Processando c√≥digo de autentica√ß√£o...');
        console.log('üîÑ Processando c√≥digo de autentica√ß√£o...');

        // Trocar o c√≥digo por uma sess√£o
        const { data, error: exchangeError } = await supabase.auth.exchangeCodeForSession(code);
        
        if (exchangeError) {
          console.error('‚ùå Erro ao trocar c√≥digo por sess√£o:', exchangeError);
          setStatus('Erro ao processar c√≥digo. Redirecionando...');
          navigate('/auth?error=invalid_code', { replace: true });
          return;
        }

        if (!data.session || !data.user) {
          console.error('‚ùå Sess√£o inv√°lida ap√≥s troca de c√≥digo');
          setStatus('Sess√£o inv√°lida. Redirecionando...');
          navigate('/auth?error=invalid_session', { replace: true });
          return;
        }

        console.log('‚úÖ Sess√£o criada com sucesso:', data.user.email);
        setStatus('Verificando dados da empresa...');

        const user = data.user;
        const pendingCompany = user.user_metadata?.pending_company;

        console.log('üè¢ Dados pendentes da empresa:', pendingCompany);

        if (pendingCompany) {
          setStatus('Criando sua empresa...');
          console.log('üè¢ Criando empresa para usu√°rio:', user.email);
          
          try {
            // Cria a empresa e limpa os metadados
            await createCompanyForUser(user.id, {
              name: pendingCompany.name,
              employeeCount: parseInt(pendingCompany.employee_count) || 10,
              companyEmail: user.email || '',
              fullName: user.user_metadata?.full_name || ''
            });
            
            console.log('‚úÖ Empresa criada com sucesso');
            setStatus('Limpando dados tempor√°rios...');
            
            await supabase.auth.updateUser({ 
              data: { pending_company: null } 
            });
            
            console.log('‚úÖ Dados tempor√°rios limpos');
            setStatus('Redirecionando para configura√ß√£o...');
            navigate('/onboarding', { replace: true });
          } catch (error) {
            console.error("‚ùå Erro ao criar empresa no callback:", error);
            setStatus('Erro ao configurar empresa. Redirecionando...');
            navigate('/auth?error=company_creation_failed', { replace: true });
          }
        } else {
          console.log('‚úÖ Usu√°rio j√° tem empresa configurada, redirecionando para dashboard');
          setStatus('Redirecionando para o dashboard...');
          navigate('/dashboard', { replace: true });
        }

      } catch (error) {
        console.error('‚ùå Erro geral no callback:', error);
        setStatus('Erro inesperado. Redirecionando...');
        navigate('/auth?error=callback_error', { replace: true });
      }
    };

    processAuthCallback();
  }, [searchParams, navigate]);

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
        <h2 className="text-xl font-semibold mb-2">Verificando sua conta...</h2>
        <p className="text-muted-foreground">{status}</p>
      </div>
    </div>
  );
}
