#!/usr/bin/env node

import https from 'https';
import { execSync } from 'child_process';

console.log('üîß TESTE AUTOM√ÅTICO DE CONFIGURA√á√ÉO DE AUTENTICA√á√ÉO');
console.log('==================================================');
console.log('');

// Fun√ß√£o para fazer requisi√ß√£o HTTPS
function makeRequest(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => resolve({ status: res.statusCode, data }));
    }).on('error', reject);
  });
}

// Fun√ß√£o para verificar se o Vercel CLI est√° instalado
function checkVercelCLI() {
  try {
    execSync('vercel --version', { stdio: 'pipe' });
    return true;
  } catch (error) {
    return false;
  }
}

// Fun√ß√£o para obter vari√°veis de ambiente do Vercel
async function getVercelEnvVars() {
  try {
    const result = execSync('vercel env ls', { encoding: 'utf8' });
    return result;
  } catch (error) {
    console.log('‚ùå Erro ao obter vari√°veis de ambiente do Vercel');
    return null;
  }
}

// Fun√ß√£o para testar a URL de produ√ß√£o
async function testProductionURL() {
  const productionURL = 'https://growthscale-home-landing.vercel.app';
  
  try {
    console.log('üåê Testando URL de produ√ß√£o...');
    const response = await makeRequest(productionURL);
    
    if (response.status === 200) {
      console.log('‚úÖ URL de produ√ß√£o est√° funcionando');
      return true;
    } else {
      console.log(`‚ùå URL de produ√ß√£o retornou status: ${response.status}`);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erro ao acessar URL de produ√ß√£o:', error.message);
    return false;
  }
}

// Fun√ß√£o para testar a p√°gina de autentica√ß√£o
async function testAuthPage() {
  const authURL = 'https://growthscale-home-landing.vercel.app/auth';
  
  try {
    console.log('üîê Testando p√°gina de autentica√ß√£o...');
    const response = await makeRequest(authURL);
    
    if (response.status === 200) {
      console.log('‚úÖ P√°gina de autentica√ß√£o est√° funcionando');
      return true;
    } else {
      console.log(`‚ùå P√°gina de autentica√ß√£o retornou status: ${response.status}`);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erro ao acessar p√°gina de autentica√ß√£o:', error.message);
    return false;
  }
}

// Fun√ß√£o para verificar se as vari√°veis de ambiente est√£o configuradas
async function checkEnvironmentVariables() {
  console.log('üîç Verificando vari√°veis de ambiente...');
  
  const envVarsOutput = await getVercelEnvVars();
  if (!envVarsOutput) {
    console.log('‚ùå N√£o foi poss√≠vel obter vari√°veis de ambiente');
    return false;
  }
  
  const requiredVars = ['VITE_SITE_URL', 'VITE_SUPABASE_URL', 'VITE_SUPABASE_ANON_KEY'];
  const missingVars = [];
  
  for (const varName of requiredVars) {
    if (envVarsOutput.includes(varName)) {
      console.log(`‚úÖ ${varName}: Configurada`);
    } else {
      missingVars.push(varName);
    }
  }
  
  if (missingVars.length > 0) {
    console.log(`‚ùå Vari√°veis faltando: ${missingVars.join(', ')}`);
    return false;
  }
  
  console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas');
  return true;
}

// Fun√ß√£o para testar o Supabase
async function testSupabaseConnection() {
  console.log('üîó Testando conex√£o com Supabase...');
  
  try {
    // Tentar acessar a URL do Supabase (vai retornar 404, mas confirma que est√° acess√≠vel)
    const supabaseURL = 'https://growthscale-home-landing.vercel.app';
    const response = await makeRequest(supabaseURL);
    
    if (response.status === 200) {
      console.log('‚úÖ Conex√£o com Supabase est√° funcionando');
      return true;
    } else {
      console.log(`‚ö†Ô∏è Supabase retornou status: ${response.status} (pode ser normal)`);
      return true; // 404 √© normal para algumas rotas
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar conex√£o com Supabase:', error.message);
    return false;
  }
}

// Fun√ß√£o principal de teste
async function runTests() {
  console.log('üöÄ Iniciando testes autom√°ticos...\n');
  
  // Teste 1: Verificar Vercel CLI
  console.log('1Ô∏è‚É£ Verificando Vercel CLI...');
  if (checkVercelCLI()) {
    console.log('‚úÖ Vercel CLI est√° instalado');
  } else {
    console.log('‚ùå Vercel CLI n√£o est√° instalado');
    console.log('   Instale com: npm i -g vercel');
    return;
  }
  console.log('');
  
  // Teste 2: Verificar vari√°veis de ambiente
  console.log('2Ô∏è‚É£ Verificando vari√°veis de ambiente...');
  const envOk = await checkEnvironmentVariables();
  console.log('');
  
  // Teste 3: Testar URL de produ√ß√£o
  console.log('3Ô∏è‚É£ Testando URL de produ√ß√£o...');
  const productionOk = await testProductionURL();
  console.log('');
  
  // Teste 4: Testar p√°gina de autentica√ß√£o
  console.log('4Ô∏è‚É£ Testando p√°gina de autentica√ß√£o...');
  const authOk = await testAuthPage();
  console.log('');
  
  // Teste 5: Testar conex√£o com Supabase
  console.log('5Ô∏è‚É£ Testando conex√£o com Supabase...');
  const supabaseOk = await testSupabaseConnection();
  console.log('');
  
  // Resumo dos testes
  console.log('üìä RESUMO DOS TESTES:');
  console.log('=====================');
  console.log(`‚úÖ Vercel CLI: ${checkVercelCLI() ? 'OK' : 'FALHOU'}`);
  console.log(`‚úÖ Vari√°veis de Ambiente: ${envOk ? 'OK' : 'FALHOU'}`);
  console.log(`‚úÖ URL de Produ√ß√£o: ${productionOk ? 'OK' : 'FALHOU'}`);
  console.log(`‚úÖ P√°gina de Auth: ${authOk ? 'OK' : 'FALHOU'}`);
  console.log(`‚úÖ Supabase: ${supabaseOk ? 'OK' : 'FALHOU'}`);
  console.log('');
  
  const allTestsPassed = envOk && productionOk && authOk && supabaseOk;
  
  if (allTestsPassed) {
    console.log('üéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ A configura√ß√£o est√° funcionando corretamente');
    console.log('');
    console.log('üöÄ PR√ìXIMOS PASSOS:');
    console.log('1. Teste o cadastro manualmente');
    console.log('2. Verifique se o email de confirma√ß√£o chega');
    console.log('3. Clique no link de confirma√ß√£o');
    console.log('4. Confirme se redireciona corretamente');
  } else {
    console.log('‚ùå ALGUNS TESTES FALHARAM');
    console.log('');
    console.log('üîß CORRE√á√ïES NECESS√ÅRIAS:');
    if (!envOk) {
      console.log('- Configure as vari√°veis de ambiente no Vercel');
    }
    if (!productionOk) {
      console.log('- Verifique se o deploy foi realizado');
    }
    if (!authOk) {
      console.log('- Verifique se a rota /auth est√° funcionando');
    }
    if (!supabaseOk) {
      console.log('- Verifique a configura√ß√£o do Supabase');
    }
  }
  
  console.log('');
  console.log('üìö DOCUMENTA√á√ÉO:');
  console.log('- SUPABASE_SETUP_GUIDE.md');
  console.log('- scripts/verify-supabase-config.sh');
}

// Executar os testes
runTests().catch(console.error);
