#!/bin/bash

# =====================================================
# SCRIPT DE TESTE AUTOMATIZADO RBAC
# GrowthScale - Teste da Configura√ß√£o
# =====================================================

set -e

echo "üß™ Iniciando testes automatizados do RBAC..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se o curl est√° dispon√≠vel
check_curl() {
    if ! command -v curl &> /dev/null; then
        log_error "curl n√£o encontrado!"
        exit 1
    fi
    log_success "curl encontrado"
}

# Testar conectividade com a aplica√ß√£o
test_app_connectivity() {
    log_info "Testando conectividade com a aplica√ß√£o..."
    
    APP_URL="https://growthscale-home-landing-9vhf2y19e.vercel.app"
    
    # Testar se a aplica√ß√£o responde (mesmo com 401/403 √© normal)
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL")
    
    if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 401 ] || [ "$HTTP_CODE" -eq 403 ]; then
        log_success "Aplica√ß√£o est√° online: $APP_URL (HTTP $HTTP_CODE)"
        return 0
    else
        log_error "Aplica√ß√£o n√£o est√° acess√≠vel: $APP_URL (HTTP $HTTP_CODE)"
        return 1
    fi
}

# Testar p√°gina RBAC Demo
test_rbac_demo() {
    log_info "Testando p√°gina RBAC Demo..."
    
    APP_URL="https://growthscale-home-landing-9vhf2y19e.vercel.app"
    RBAC_URL="$APP_URL/rbac-demo"
    
    # Testar se a p√°gina responde (mesmo com 401/403 √© normal)
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$RBAC_URL")
    
    if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 401 ] || [ "$HTTP_CODE" -eq 403 ]; then
        log_success "P√°gina RBAC Demo est√° acess√≠vel: $RBAC_URL (HTTP $HTTP_CODE)"
        return 0
    else
        log_warning "P√°gina RBAC Demo pode n√£o estar dispon√≠vel (HTTP $HTTP_CODE)"
        return 0
    fi
}

# Verificar vari√°veis de ambiente do Supabase
check_supabase_env() {
    log_info "Verificando configura√ß√£o do Supabase..."
    
    if [ -f ".env.local" ]; then
        log_success "Arquivo .env.local encontrado"
        
        if grep -q "VITE_SUPABASE_URL" .env.local; then
            log_success "VITE_SUPABASE_URL configurado"
        else
            log_warning "VITE_SUPABASE_URL n√£o encontrado"
        fi
        
        if grep -q "VITE_SUPABASE_ANON_KEY" .env.local; then
            log_success "VITE_SUPABASE_ANON_KEY configurado"
        else
            log_warning "VITE_SUPABASE_ANON_KEY n√£o encontrado"
        fi
    else
        log_warning "Arquivo .env.local n√£o encontrado"
    fi
}

# Verificar arquivos do projeto
check_project_files() {
    log_info "Verificando arquivos do projeto..."
    
    # Verificar arquivos principais
    files_to_check=(
        "src/hooks/useAccessControl.ts"
        "src/services/userProfileService.ts"
        "src/components/AccessControl.tsx"
        "src/pages/RBACDemo.tsx"
        "supabase/rbac-setup-fixed.sql"
        "docs/RBAC_SETUP.md"
        "docs/RBAC_AUTOMATION.md"
    )
    
    for file in "${files_to_check[@]}"; do
        if [ -f "$file" ]; then
            log_success "‚úÖ $file"
        else
            log_error "‚ùå $file (n√£o encontrado)"
        fi
    done
}

# Verificar depend√™ncias
check_dependencies() {
    log_info "Verificando depend√™ncias..."
    
    if [ -f "package.json" ]; then
        log_success "package.json encontrado"
        
        # Verificar se @supabase/supabase-js est√° instalado
        if grep -q "@supabase/supabase-js" package.json; then
            log_success "Supabase JS SDK instalado"
        else
            log_warning "Supabase JS SDK pode n√£o estar instalado"
        fi
        
        # Verificar se lucide-react est√° instalado
        if grep -q "lucide-react" package.json; then
            log_success "Lucide React instalado"
        else
            log_warning "Lucide React pode n√£o estar instalado"
        fi
    else
        log_error "package.json n√£o encontrado"
    fi
}

# Verificar build
check_build() {
    log_info "Verificando se o projeto compila..."
    
    if npm run build > /dev/null 2>&1; then
        log_success "Projeto compila sem erros"
    else
        log_error "Projeto n√£o compila - verifique os erros"
        return 1
    fi
}

# Gerar relat√≥rio de status
generate_status_report() {
    log_info "Gerando relat√≥rio de status..."
    
    echo ""
    echo "=================================================="
    echo "üìä RELAT√ìRIO DE STATUS - RBAC GROWTHSCALE"
    echo "=================================================="
    echo ""
    echo "üåê URLs:"
    echo "   ‚Ä¢ Aplica√ß√£o: https://growthscale-home-landing-9vhf2y19e.vercel.app"
    echo "   ‚Ä¢ RBAC Demo: https://growthscale-home-landing-9vhf2y19e.vercel.app/rbac-demo"
    echo ""
    echo "üìÅ Arquivos Principais:"
    echo "   ‚Ä¢ Hook RBAC: src/hooks/useAccessControl.ts"
    echo "   ‚Ä¢ Servi√ßo: src/services/userProfileService.ts"
    echo "   ‚Ä¢ Componentes: src/components/AccessControl.tsx"
    echo "   ‚Ä¢ P√°gina Demo: src/pages/RBACDemo.tsx"
    echo "   ‚Ä¢ Script SQL: supabase/rbac-setup-fixed.sql"
    echo ""
    echo "üìö Documenta√ß√£o:"
    echo "   ‚Ä¢ Setup: docs/RBAC_SETUP.md"
    echo "   ‚Ä¢ Automa√ß√£o: docs/RBAC_AUTOMATION.md"
    echo ""
    echo "üîß Pr√≥ximos Passos:"
    echo "   1. Execute o script SQL no Supabase"
    echo "   2. Configure os roles dos usu√°rios"
    echo "   3. Teste a aplica√ß√£o"
    echo "   4. Acesse /rbac-demo para ver a demonstra√ß√£o"
    echo ""
}

# Menu principal
main_menu() {
    echo ""
    echo "=================================================="
    echo "üß™ TESTE RBAC - GROWTHSCALE"
    echo "=================================================="
    echo ""
    echo "1. Verificar conectividade"
    echo "2. Verificar arquivos do projeto"
    echo "3. Verificar depend√™ncias"
    echo "4. Testar build"
    echo "5. Executar todos os testes"
    echo "6. Gerar relat√≥rio completo"
    echo "7. Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " choice
    
    case $choice in
        1)
            check_curl
            test_app_connectivity
            test_rbac_demo
            ;;
        2)
            check_project_files
            ;;
        3)
            check_dependencies
            ;;
        4)
            check_build
            ;;
        5)
            check_curl
            test_app_connectivity
            test_rbac_demo
            check_supabase_env
            check_project_files
            check_dependencies
            check_build
            generate_status_report
            ;;
        6)
            generate_status_report
            ;;
        7)
            log_info "Saindo..."
            exit 0
            ;;
        *)
            log_error "Op√ß√£o inv√°lida!"
            main_menu
            ;;
    esac
}

# Executar testes autom√°ticos se n√£o houver argumentos
if [ $# -eq 0 ]; then
    check_curl
    test_app_connectivity
    test_rbac_demo
    check_supabase_env
    check_project_files
    check_dependencies
    check_build
    generate_status_report
else
    main_menu
fi
